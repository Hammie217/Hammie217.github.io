-- Start with the "AddWithCarry" example from the VHDL coding examples
-- section of the EEE6490 website and ask ISE to create new module
-- of type testbench.  The VHDL below will result.
-- NOTE: This is only a framework for modification by the designer
-- to carry out some useful testing, to start with it simply defines
-- the module under test and leaves the testing function empty!

-- Libraries to use

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;

-- Unique name for the testbench (NOTE a testbench has NO inputs or outputs)

ENTITY addwithcarry_tb_basic_vhd_tb IS
END addwithcarry_tb_basic_vhd_tb;

-- Architectural description of the testbench

ARCHITECTURE behavior OF addwithcarry_tb_basic_vhd_tb IS 

	-- component declaration for the module to test

	COMPONENT addwithcarry
	PORT(
		A : IN std_logic_vector(7 downto 0);
		B : IN std_logic_vector(7 downto 0);
		CarryIn : IN std_logic;          
		Sum : OUT std_logic_vector(7 downto 0);
		CarryOut : OUT std_logic
		);
	END COMPONENT;

	-- signal declarations for all the inputs and outputs

	SIGNAL A :  std_logic_vector(7 downto 0);
	SIGNAL B :  std_logic_vector(7 downto 0);
	SIGNAL CarryIn :  std_logic;
	SIGNAL Sum :  std_logic_vector(7 downto 0);
	SIGNAL CarryOut :  std_logic;

	-- User can add their own procedures and functions here
	-- to simplify description of repetive tasks and add clarity

BEGIN

	-- instantiation of the unit under test (uut)
	-- NOTE: ISE only supports a single uut instantiation for simulation
	-- Modelsim is much more flexible but the ISE project navigator will
	-- cause problems if more than one unit is instantiated....

	uut: addwithcarry PORT MAP(
		A => A,
		B => B,
		CarryIn => CarryIn,
		Sum => Sum,
		CarryOut => CarryOut
	);


	-- User can add additional processes here to perform the required testing
	-- an example could be generation of a clock...


	-- The ISE creates and empty process which terminates on a wait statement
	-- such a process is only run once in simulation and is intended to give
	-- the designer a starting point

-- *** Test Bench - User Defined Section ***
   tb : PROCESS
   BEGIN

	-- This is where you add statements to set the inputs for the uut
	-- and compare the results against known answers

      wait; -- will wait forever
   END PROCESS;
-- *** End Test Bench - User Defined Section ***

END;