-- This example starts with the LFSR tutorial.  Add a new module of type VHDL testbench.
-- Functions defined for displaying a std_logic_vector as binary and hexadecimal

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;
use ieee.std_logic_unsigned.ALL;

ENTITY lfsr_tb_lfsr_results_vhd_tb IS
END lfsr_tb_lfsr_results_vhd_tb;

ARCHITECTURE behavior OF lfsr_tb_lfsr_results_vhd_tb IS 

	
	constant PERIOD : time := 100 ns;
	constant RESET_DELAY : time := 514 ns;

	COMPONENT lfsr
	PORT(
		clk : IN std_logic;
		reset : IN std_logic;          
		Q : OUT std_logic_vector(15 downto 0)
		);
	END COMPONENT;
	
	SIGNAL clk :  std_logic := '0';
	SIGNAL reset :  std_logic := '0';
	SIGNAL Q :  std_logic_vector(15 downto 0);
	
	signal clk_enable : std_logic := '1';


-- vec_image -------------------------------------------------------------------
    function vec_image(arg : std_logic_vector) return string is
	    -- recursive function call turns ('1','0','1') into "101" by Mike Treseler
       constant arg_norm        : std_logic_vector(1 to arg'length) := arg;
       constant center          : natural                           := 2;
                                              -- point to the character in '1'
       variable just_the_number : character;  -- the 1 or 0 inside the ' '
       variable bit_image       : string(1 to 3);
    begin
       if (arg'length > 0) then
          bit_image       := std_logic'image( arg_norm(1) );  -- is  "'0'"
          just_the_number := bit_image(center);               -- want "0"
          return just_the_number                          -- do the first digit
             & vec_image(arg_norm(2 to arg_norm'length)); -- do rest same way
       else
          return "";                     -- until "the rest" is nothing
       end if;
    end function vec_image;



-- hex_image -------------------------------------------------------------------
function hex_image(arg : std_logic_vector) return string is
   -- as above except output in hexadecimal by TRG
	type nibbles is array (0 to 15) of character;
	constant hex : nibbles := ('0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f');
	constant arg_norm        : std_logic_vector(1 to arg'length) := arg;	
	variable this_digit : character;
begin
	if (arg'length>0) then	
		this_digit := hex(conv_integer(arg_norm(1 to 4)));
		return  this_digit & hex_image(arg_norm(5 to arg_norm'length));
	else
		return "";
	end if;
end function hex_image;




BEGIN
	
	uut: lfsr PORT MAP(
		clk => clk,
		reset => reset,
		Q => Q
	);


	clk_gen: process
	begin
		if clk_enable = '1' then
			clk <= not clk;
			wait for PERIOD;
		else
			wait;
		end if;
	end process;

-- *** Test Bench - User Defined Section ***
   tb : PROCESS
   BEGIN
		
		wait for RESET_DELAY;
		wait until rising_edge(clk);
		reset <= '1';
		wait until rising_edge(clk);
		reset <= '0';

		-- output results for first 32 values in binary and hexadecimal
		for i in 0 to 31 loop
			wait until rising_edge(clk);
			report "LFSR value = " & vec_image(Q) &" binary   or   " & hex_image(Q) &" hex " severity note;
		end loop;
		
		
		clk_enable <= '0';
		report "*** Simulation completed ***" severity note;
      wait; 
   END PROCESS;
-- *** End Test Bench - User Defined Section ***

END;