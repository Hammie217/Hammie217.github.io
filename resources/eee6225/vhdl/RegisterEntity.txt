library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

--  Uncomment the following lines to use the declarations that are
--  provided for instantiating Xilinx primitive components.
--library UNISIM;
--use UNISIM.VComponents.all;

-- 
-- To instantiate this register include a component declaration in the start of the architecture where it is to be used
-- followed by the instantiation after the "begin" statment.  Example:
--
--   architecture rtl of Example is
--
--			component MyRegister is
--				Generic ( N : positive );
--				Port ( clk,rst,load : in std_logic;
--						 D : in std_logic_vector(N-1 downto 0);
--						 Q : out std_logic_vector(N-1 downto 0));
--			end component
--
--	    begin
--			reg1: MyRegister generic map (32) port map (clk,rst,loadR1,data_in, reg1value);
--			reg2: MyRegister generic map (32) port map (clk,rst,loadR2,data_in, reg2value);
--		end rtl;
--


entity MyRegister is
    Generic ( N : positive := 32 ); -- This generic defines the length with a default value of 32
	 Port ( clk,rst,load : in std_logic;
           D : in std_logic_vector(N-1 downto 0);
           Q : out std_logic_vector(N-1 downto 0));
end MyRegister;

architecture Behavioral of MyRegister is
	
begin
	process (clk,rst)
		 begin
		 		if rst = '1' then
					Q <= (others => '0');	-- asynchronous reset to fill with zeros
				elsif rising_edge(clk) then
					if load = '1' then
						Q <= D;
					end if;
				end if;
		 end process;
end Behavioral;
